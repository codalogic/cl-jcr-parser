Tests run on Thu Jul 16 14:49:31 2015

    GrammarParser - parsing c-wsp [test-grammar-parser.cpp:78]
    ==========================================================
      Calling: test_c_wsp( "#pedantic" ) (80)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( "    #pedantic" ) (81)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( ";My first jcr\n" "#pedantic" ) (83)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" "#pedantic" ) (85)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" ";More grammars\r\n" "#pedantic" ) (88)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( "   \n" "   ;My first jcr\n" ";More grammars\r\n" "#pedantic" ) (92)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" ";More grammars\r\n" "#pedantic\n" "  ; Stuff at end" ) (96)
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
      Calling: test_c_wsp_2_directives( "#pedantic\n" "#language-compatible-members" ) (100)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "    #pedantic\n" "    #language-compatible-members" ) (103)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "; A comment\n" "#pedantic\n" "; Another comment\n" "#language-compatible-members" ) (108)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members" ) (113)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members\r\n" ";More comments\n" ) (119)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members\r\n" "    ;More comments\n" ) (125)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "   ; Also a comment\n" "#language-compatible-members\r\n" "    ;More comments\n" ) (132)
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive()->get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive()->get() == "language-compatible-members"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - parsing directives [test-grammar-parser.cpp:135]
    ================================================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarSet TODOS [test-grammar-set.cpp:40]
    ==========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Miscellaneous TODOs [test-main.cpp:37]
    ======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    RuleOrDirective creation [test-object-creation.cpp:40]
    ======================================================
    ok: pu_rule_or_directive->is_rule() == true
    ok: pu_rule_or_directive->is_directive() == false
    ok: pu_rule_or_directive->rule() != 0
    ok: true
    ok: pu_rule_or_directive->is_directive() == true
    ok: pu_rule_or_directive->is_rule() == false
    ok: pu_rule_or_directive->directive() != 0
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar creation / deletion [test-object-creation.cpp:77]
    =========================================================
    ok: i != end
    ok: i->is_directive()
    ok: ! (*i).is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: grammar.back_is_directive()
    ok: ! grammar.back_is_rule()
    ok: grammar.back_is_rule()
    ok: ! grammar.back_is_directive()
    ok: i != end
    ok: i->is_directive()
    ok: ! i->is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar exception throwing on bad selection [test-object-creation.cpp:128]
    ==========================================================================
    ok: true
    ok: true
    ok: true
    ok: true
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (4):
------------------------
- Test GrammarParser - parsing directives [test-grammar-parser.cpp:137]
- Test GrammarSet class [test-grammar-set.cpp:42]
- Implement and test GrammarSet::link() [test-grammar-set.cpp:44]
- Verify if we really need Grammar::append_rule() [test-object-creation.cpp:187]

0 error(s), 4 todo(s), 104 test(s)
