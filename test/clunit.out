Tests run on Mon Aug 17 14:17:41 2015

    GrammarParser - parsing c-wsp [test-grammar-parser.cpp:82]
    ==========================================================
      Calling: test_c_wsp( "#pedantic" ) (84)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( "    #pedantic" ) (85)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( ";My first jcr\n" "#pedantic" ) (87)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" "#pedantic" ) (89)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" ";More grammars\r\n" "#pedantic" ) (92)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( "   \n" "   ;My first jcr\n" ";More grammars\r\n" "#pedantic" ) (96)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp( "   ;My first jcr\n" ";More grammars\r\n" "#pedantic\n" "  ; Stuff at end" ) (100)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 1
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
      Calling: test_c_wsp_2_directives( "#pedantic\n" "#language-compatible-members" ) (104)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "    #pedantic\n" "    #language-compatible-members" ) (107)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "; A comment\n" "#pedantic\n" "; Another comment\n" "#language-compatible-members" ) (112)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members" ) (117)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members\r\n" ";More comments\n" ) (123)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "#language-compatible-members\r\n" "    ;More comments\n" ) (129)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
      Calling: test_c_wsp_2_directives( "   ; A comment\n" "#pedantic\n" "   ; Another comment\n" "   ; Also a comment\n" "#language-compatible-members\r\n" "    ;More comments\n" ) (136)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "pedantic"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().get() == "language-compatible-members"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - parsing directives [test-grammar-parser.cpp:160]
    ================================================================
      Calling: test_2_directives( "#name http://example.com/myjcr.jcr\n" "#import http://example.com/otherjcr.jcr as other" ) (164)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "name http://example.com/myjcr.jcr"
    ok: h.grammar()[0].directive().size() == 2
    ok: h.grammar()[0].directive()[0] == "name"
    ok: h.grammar()[0].directive().get(1) == "http://example.com/myjcr.jcr"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().size() == 4
    ok: h.grammar()[1].directive().get() == "import http://example.com/otherjcr.jcr as other"
    ok: h.grammar()[1].directive()[0] == "import"
    ok: h.grammar()[1].directive().get(1) == "http://example.com/otherjcr.jcr"
    ok: h.grammar()[1].directive().get(2) == "as"
    ok: h.grammar()[1].directive().get(3) == "other"
      Calling: test_2_directives( "#name http://example.com/myjcr.jcr\n" "#import http://example.com/otherjcr.jcr as other\n" ) (167)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "name http://example.com/myjcr.jcr"
    ok: h.grammar()[0].directive().size() == 2
    ok: h.grammar()[0].directive()[0] == "name"
    ok: h.grammar()[0].directive().get(1) == "http://example.com/myjcr.jcr"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().size() == 4
    ok: h.grammar()[1].directive().get() == "import http://example.com/otherjcr.jcr as other"
    ok: h.grammar()[1].directive()[0] == "import"
    ok: h.grammar()[1].directive().get(1) == "http://example.com/otherjcr.jcr"
    ok: h.grammar()[1].directive().get(2) == "as"
    ok: h.grammar()[1].directive().get(3) == "other"
      Calling: test_2_directives( "\n" "#name http://example.com/myjcr.jcr\n" "\n" "#import http://example.com/otherjcr.jcr as other\n" "\n" ) (173)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "name http://example.com/myjcr.jcr"
    ok: h.grammar()[0].directive().size() == 2
    ok: h.grammar()[0].directive()[0] == "name"
    ok: h.grammar()[0].directive().get(1) == "http://example.com/myjcr.jcr"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().size() == 4
    ok: h.grammar()[1].directive().get() == "import http://example.com/otherjcr.jcr as other"
    ok: h.grammar()[1].directive()[0] == "import"
    ok: h.grammar()[1].directive().get(1) == "http://example.com/otherjcr.jcr"
    ok: h.grammar()[1].directive().get(2) == "as"
    ok: h.grammar()[1].directive().get(3) == "other"
      Calling: test_2_directives( "; with comments\n" "#name http://example.com/myjcr.jcr\n" "; Another comment\n" "#import http://example.com/otherjcr.jcr as other\n" "\n" ) (179)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "name http://example.com/myjcr.jcr"
    ok: h.grammar()[0].directive().size() == 2
    ok: h.grammar()[0].directive()[0] == "name"
    ok: h.grammar()[0].directive().get(1) == "http://example.com/myjcr.jcr"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().size() == 4
    ok: h.grammar()[1].directive().get() == "import http://example.com/otherjcr.jcr as other"
    ok: h.grammar()[1].directive()[0] == "import"
    ok: h.grammar()[1].directive().get(1) == "http://example.com/otherjcr.jcr"
    ok: h.grammar()[1].directive().get(2) == "as"
    ok: h.grammar()[1].directive().get(3) == "other"
      Calling: test_2_directives( "; with comments\n" "   \n" "#name http://example.com/myjcr.jcr\n" "\n" "; Another comment\n" "\n" "#import http://example.com/otherjcr.jcr as other\n" "; Yet another comment\n" "\n" ) (189)
    ok: h.status() == JCRParser::S_OK
    ok: h.grammar().size() == 2
    ok: h.grammar()[0].is_directive()
    ok: h.grammar()[0].directive().get() == "name http://example.com/myjcr.jcr"
    ok: h.grammar()[0].directive().size() == 2
    ok: h.grammar()[0].directive()[0] == "name"
    ok: h.grammar()[0].directive().get(1) == "http://example.com/myjcr.jcr"
    ok: h.grammar()[1].is_directive()
    ok: h.grammar()[1].directive().size() == 4
    ok: h.grammar()[1].directive().get() == "import http://example.com/otherjcr.jcr as other"
    ok: h.grammar()[1].directive()[0] == "import"
    ok: h.grammar()[1].directive().get(1) == "http://example.com/otherjcr.jcr"
    ok: h.grammar()[1].directive().get(2) == "as"
    ok: h.grammar()[1].directive().get(3) == "other"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarSet TODOS [test-grammar-set.cpp:40]
    ==========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Miscellaneous TODOs [test-main.cpp:37]
    ======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    RuleOrDirective creation [test-object-creation.cpp:40]
    ======================================================
    ok: pu_rule_or_directive->is_rule() == true
    ok: pu_rule_or_directive->is_directive() == false
    ok: true
    ok: pu_rule_or_directive->is_directive() == true
    ok: pu_rule_or_directive->is_rule() == false
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar creation / deletion [test-object-creation.cpp:75]
    =========================================================
    ok: i != end
    ok: i->is_directive()
    ok: ! (*i).is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: grammar.back_is_directive()
    ok: ! grammar.back_is_rule()
    ok: grammar.back_is_rule()
    ok: ! grammar.back_is_directive()
    ok: i != end
    ok: i->is_directive()
    ok: ! i->is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar exception throwing on bad selection [test-object-creation.cpp:126]
    ==========================================================================
    ok: true
    ok: true
    ok: true
    ok: true
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Creating various types of Rules in Grammars [test-object-creation.cpp:187]
    ==========================================================================
    ok: r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: ! r_rule.is_ref_rule()
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: r_rule.is_object_rule()
    ok: ! r_rule.is_ref_rule()
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: r_rule.is_ref_rule()
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: ! r_rule.is_ref_rule()
    ok: r_rule.is_value_rule()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Creating various types of ValueRule, e.g. SimpleType, EnumType etc. [test-object-creation.cpp:226]
    ==================================================================================================
    ok: r_value_rule.is_value_rule()
    ok: ! r_value_rule.is_simple_type()
    ok: ! r_value_rule.is_enum_type()
    ok: ! r_value_rule.is_union_type()
    ok: r_value_rule.is_simple_type()
    ok: ! r_value_rule.is_enum_type()
    ok: ! r_value_rule.is_union_type()
    ok: ! r_value_rule.is_simple_type()
    ok: r_value_rule.is_enum_type()
    ok: ! r_value_rule.is_union_type()
    ok: ! r_value_rule.is_simple_type()
    ok: ! r_value_rule.is_enum_type()
    ok: r_value_rule.is_union_type()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (7):
------------------------
- Test GrammarSet class [test-grammar-set.cpp:42]
- Implement and test GrammarSet::link() [test-grammar-set.cpp:44]
- Implement ValueRuleAdapters [test-main.cpp:39]
- Make RefRule set method split input into module and local parts [test-main.cpp:41]
- Test ValueType class [test-main.cpp:43]
- Test ValueRule class and derivatives [test-main.cpp:45]
- Verify if we really need Grammar::append_rule() [test-object-creation.cpp:185]

0 error(s), 7 todo(s), 217 test(s)
