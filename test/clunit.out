Tests run on Sun Jul 10 14:10:35 2016

    GrammarSet TODOS [test-grammar-set.cpp:40]
    ==========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ValueConstraint [test-low-level-objects.cpp:40]
    ===============================================
    ok: vc.is_set() == false
      : vc = "string"
    ok: vc.is_set() == true
    ok: vc.is_string() == true
    ok: vc.as_string() == "string"
    ok: vc.as_string() != "other"
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
      : vc = std::string( "string" )
    ok: vc.is_set() == true
    ok: vc.is_string() == true
    ok: vc.as_string() == "string"
    ok: vc.as_string() != "other"
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
      : vc = true
    ok: vc.is_set() == true
    ok: vc.is_bool() == true
    ok: vc.as_bool() == true
    ok: vc.is_string() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
      : vc = false
    ok: vc.is_set() == true
    ok: vc.is_bool() == true
    ok: vc.as_bool() == false
    ok: vc.is_string() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
      : vc = (int64)10
    ok: vc.is_set() == true
    ok: vc.is_int() == true
    ok: vc.as_int() == 10
    ok: vc.is_string() == false
    ok: vc.is_bool() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
      : vc = (uint64)10
    ok: vc.is_set() == true
    ok: vc.is_uint() == true
    ok: vc.as_uint() == 10
    ok: vc.is_string() == false
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_float() == false
      : vc = 10.5
    ok: vc.is_set() == true
    ok: vc.is_float() == true
    ok: vc.as_float() == 10.5
    ok: vc.is_string() == false
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
      : vc = 2.5e+3
    ok: vc.is_set() == true
    ok: vc.is_float() == true
    ok: vc.as_float() == 2500.0
    ok: vc.is_string() == false
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
      : vc.clear()
    ok: vc.is_set() == false
    ok: vc.is_string() == false
    ok: vc.is_bool() == false
    ok: vc.is_int() == false
    ok: vc.is_uint() == false
    ok: vc.is_float() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    MemberName [test-low-level-objects.cpp:129]
    ===========================================
    ok: mn.is_absent() == true
    ok: mn.is_literal() == false
    ok: mn.is_regex() == false
    ok: mn.name() == ""
      : mn.set_literal( "foo" )
    ok: mn.is_absent() == false
    ok: mn.is_literal() == true
    ok: mn.is_regex() == false
    ok: mn.name() == "foo"
      : mn.set_regex( "/name*/i" )
    ok: mn.is_absent() == false
    ok: mn.is_literal() == false
    ok: mn.is_regex() == true
    ok: mn.name() == "/name*/i"
      : mn.set_absent()
    ok: mn.is_absent() == true
    ok: mn.is_literal() == false
    ok: mn.is_regex() == false
    ok: mn.name() == ""
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    TargetRule [test-low-level-objects.cpp:157]
    ===========================================
    ok: ! tr.p_rule
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Rule [test-low-level-objects.cpp:164]
    =====================================
    ok: ! r.p_parent
    ok: r.type == Rule::NONE
      : Rule::uniq_ptr pu_rule( new Rule )
    ok: ! pu_rule->p_parent
    ok: pu_rule->type == Rule::NONE
      : Rule * p_new_rule = pu_rule.get()
      : Rule * p_appended_rule = r.append_child_rule( pu_rule )
    ok: p_appended_rule == p_new_rule
    ok: p_appended_rule->p_parent == &r
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar [test-low-level-objects.cpp:182]
    ========================================
      Adding and accessing unaliased imports
      : g.add_unaliased_import( "foo" )
    ok: g.unaliased_imports.size() == 1
      : g.add_unaliased_import( "bar" )
    ok: g.unaliased_imports.size() == 2
    ok: g.unaliased_imports[0] == "foo"
    ok: g.unaliased_imports[1] == "bar"
      Adding aliased imports
    ok: g.has_aliased_import( "foo" ) == false
    ok: g.add_aliased_import( "foo", "http://foo" ) == true
    ok: g.has_aliased_import( "foo" ) == true
    ok: g.has_aliased_import( "bar" ) == false
    ok: g.add_aliased_import( "bar", "http://bar" ) == true
    ok: g.has_aliased_import( "bar" ) == true
    ok: g.aliased_imports["foo"] == "http://foo"
    ok: g.aliased_imports["bar"] == "http://bar"
      Adding duplicate aliased imports fails
    ok: g.add_aliased_import( "foo", "http://foo" ) == false
      Accessing aliased imports for const instances
      : const Grammar & r_g( g )
    ok: r_g.get_aliased_import( "foo" ).value() == "http://foo"
      : std::string foo = r_g.get_aliased_import( "foo" )
    ok: foo == "http://foo"
    ok: r_g.get_aliased_import( "bar" ).value() == "http://bar"
    ok: r_g.has_aliased_import( "blah" ) == false
    ok: r_g.get_aliased_import( "blah" ).is_found() == false
      Adding rules
    ok: g.rules.size() == 0
      : Rule::uniq_ptr pu_r( new Rule )
      : pu_r->p_parent = pu_r.get()
    ok: pu_r->p_parent != 0
      : Rule * p_unmanaged_rule = pu_r.get()
      : Rule * p_r = g.append_rule( pu_r )
    ok: p_r == p_unmanaged_rule
    ok: ! p_r->p_parent
    ok: g.rules.size() == 1
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Miscellaneous TODOs [test-main.cpp:37]
    ======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing with no semantic interpretation - comments [test-parsing-only.cpp:62]
    ====================================================================================================
      Calling: test_parsing_only( "" ) (65)
      
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "   " ) (67)
         
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (69)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (71)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     " ) (74)
      ; Hello World
     
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     \n" "  ; Let's go..." ) (78)
      ; Hello World
     
  ; Let's go...
    ok: status == JCRParser::S_OK
      Calling: test_parsing_bad_input( "; Hello World ; Let's go...\n" ) (80)
      ; Hello World ; Let's go...

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World ;; Let's go...\n" ) (82)
      ; Hello World ;; Let's go...

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "" ) (84)
      
    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - JCR directive [test-parsing-only.cpp:87]
    =========================================================================
      Calling: test_parsing_only( "#jcr-version 0.5" ) (90)
      #jcr-version 0.5
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "#jcr-version 0.5 " ) (92)
      #jcr-version 0.5 
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "#jcr-version 0.5 \t" ) (94)
      #jcr-version 0.5 	
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_bad_input( "#\n" "jcr-version\n" " 0.5" ) (98)
      #
jcr-version
 0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version 0.12" ) (100)
      #jcr-version 0.12
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version 10.5" ) (102)
      #jcr-version 10.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version 0.5 too long" ) (104)
      #jcr-version 0.5 too long
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5" ) (107)
      ; Start
#jcr-version 0.5
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5\n" "; End" ) (111)
      ; Start
#jcr-version 0.5
; End
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "  #jcr-version 0.5\n" "; End" ) (114)
        #jcr-version 0.5
; End
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "; Start ; #jcr-version 0.5" ) (116)
      ; Start ; #jcr-version 0.5
not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_bad_input( "#jcr-version0.5" ) (118)
      #jcr-version0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version a.5" ) (120)
      #jcr-version a.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version 0:5" ) (122)
      #jcr-version 0:5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#jcr-version 0.b" ) (124)
      #jcr-version 0.b
    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - ruleset-id directive [test-parsing-only.cpp:127]
    =================================================================================
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" ) (130)
      #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr \n" ) (132)
      #ruleset-id http://www.example.com/jcr 

    ok: status == JCRParser::S_OK
      Calling: test_parsing_bad_input( "#ruleset-id \n" ) (134)
      #ruleset-id 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#ruleset-id\n" ) (136)
      #ruleset-id

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; A comment ; #ruleset-id http://www.example.com/jcr\n" ) (138)
      ; A comment ; #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment" ) (141)
      #ruleset-id http://www.example.com/jcr
; A comment
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment\n" "; Another comment\n" "#jcr-version 0.5\n" ) (146)
      #ruleset-id http://www.example.com/jcr
; A comment
; Another comment
#jcr-version 0.5

not ok: status == JCRParser::S_OK (49)
      : ParserHarness ph( "#ruleset-id http://www.example.com/jcr" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().ruleset_id == "http://www.example.com/jcr"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - import directive [test-parsing-only.cpp:154]
    =============================================================================
      Calling: test_parsing_only( "#import http://www.example.com/jcr\n" ) (157)
      #import http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#import http://www.example.com/jcr \n" ) (159)
      #import http://www.example.com/jcr 

    ok: status == JCRParser::S_OK
      Calling: test_parsing_bad_input( "#import http://www.example.com/jcr as\n" ) (161)
      #import http://www.example.com/jcr as

    ok: status != JCRParser::S_OK
      Calling: test_parsing_bad_input( "#import http://www.example.com/jcr as \n" ) (163)
      #import http://www.example.com/jcr as 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "#import http://www.example.com/jcr as my_1st-alias\n" ) (165)
      #import http://www.example.com/jcr as my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#import http://www.example.com/jcr as my_1st-alias \n" ) (167)
      #import http://www.example.com/jcr as my_1st-alias 

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#import http://www.example.com/jcr as  my_1st-alias\n" ) (170)
       ; Hello
#import http://www.example.com/jcr as  my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "#ruleset-id http://www.example.com/jcr\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (177)
       ; Hello
#jcr-version 0.5
#ruleset-id http://www.example.com/jcr
#import http://www.example.com/jcr as  my_1st-alias
#import http://www.example.com/jcr2 as  my_2nd-alias


not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "  ; A comment\n" "#ruleset-id http://www.example.com/jcr\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (191)
       ; Hello
#jcr-version 0.5
  ; A comment
#ruleset-id http://www.example.com/jcr
  ; A comment
  ; A comment
#import http://www.example.com/jcr as  my_1st-alias
  ; A comment
  ; A comment
  ; A comment
  ; A comment
#import http://www.example.com/jcr2 as  my_2nd-alias


not ok: status == JCRParser::S_OK (49)
      : ParserHarness ph( "#import http://www.example.com/jcr" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().unaliased_imports[0] == "http://www.example.com/jcr"
      : ParserHarness ph( "#import http://www.example.com/jcr as jcr" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().has_aliased_import( "jcr" )
    ok: ph.grammar().get_aliased_import( "jcr" ).value() == "http://www.example.com/jcr"
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - multi-line directive [test-parsing-only.cpp:205]
    =================================================================================
      Calling: test_parsing_only( "#{constraint foo \n" "  $id == 'None' }\n" ) (209)
      #{constraint foo 
  $id == 'None' }

    ok: status == JCRParser::S_OK
      : ParserHarness ph( "#{constraint foo\n" "    $name == /p\\d{1,5}/ && ; Must allow } and { in comments\n" "    $when == \"} with {\"\n" "}\n" "my_rule = other_rule\n" )
not ok: ph.status() == JCRParser::S_OK (217)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - TBD directive [test-parsing-only.cpp:223]
    ==========================================================================
      Calling: test_parsing_only( "#TBD\n" ) (226)
      #TBD

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#TBD  we\n" ) (228)
      #TBD  we

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#TBD  we don't know\n" ) (230)
      #TBD  we don't know

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello\n" "#TBD\n" "#jcr-version 0.5\n" ) (234)
      ; Hello
#TBD
#jcr-version 0.5

    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - target_rule_name [test-parsing-only.cpp:237]
    =============================================================================
      : ParserHarness ph( "my_rule = other_rule\n" )
not ok: ph.status() == JCRParser::S_OK (241)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - Primitive rules [test-parsing-only.cpp:260]
    ============================================================================
      : ParserHarness ph( "my_rule = : flubber\n" )
    ok: ph.status() != JCRParser::S_OK
      : ParserHarness ph( "my_rule = : null\n" )
not ok: ph.status() == JCRParser::S_OK (269)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - root rule [test-parsing-only.cpp:725]
    ======================================================================
      : ParserHarness ph( " : integer" )
not ok: ph.status() == JCRParser::S_OK (729)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - Member name [test-parsing-only.cpp:763]
    ========================================================================
      : ParserHarness ph( "my_rule = \"Fred\" : null\n" )
not ok: ph.status() == JCRParser::S_OK (767)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - type-choice [test-parsing-only.cpp:825]
    ========================================================================
      : ParserHarness ph( "my_rule = : (: null)\n" )
not ok: ph.status() == JCRParser::S_OK (829)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - object [test-parsing-only.cpp:921]
    ===================================================================
      : ParserHarness ph( "my_rule = { \"member\" : integer }\n" )
not ok: ph.status() == JCRParser::S_OK (925)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - array [test-parsing-only.cpp:1194]
    ===================================================================
      : ParserHarness ph( "my_rule = [ : integer ]\n" )
not ok: ph.status() == JCRParser::S_OK (1198)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - group [test-parsing-only.cpp:1407]
    ===================================================================
      : ParserHarness ph( "my_rule = ( : integer )\n" )
not ok: ph.status() == JCRParser::S_OK (1411)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - repetition [test-parsing-only.cpp:1586]
    ========================================================================
      : ParserHarness ph( "my_rule = [ : integer ]\n" )
not ok: ph.status() == JCRParser::S_OK (1590)
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - annotations [test-parsing-only.cpp:1679]
    =========================================================================
      Calling: test_parsing_only( "my_rule = @{root} other_rule\n" ) (1682)
      my_rule = @{root} other_rule

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type} : string, : float ]\n" ) (1684)
      my_rule = [ @{id type} : string, : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type} : string, ? @{when $type} : float ]\n" ) (1686)
      my_rule = [ @{id type} : string, ? @{when $type} : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type} : string, ? @{when $type}@{assert $ > 15.0} : float ]\n" ) (1688)
      my_rule = [ @{id type} : string, ? @{when $type}@{assert $ > 15.0} : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type}@{assert $==\"in\" || $==\"out\"} : string, ? : float ]\n" ) (1690)
      my_rule = [ @{id type}@{assert $=="in" || $=="out"} : string, ? : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type}@{assert $==/^\\w{1,4}$/} : string, ? : float ]\n" ) (1692)
      my_rule = [ @{id type}@{assert $==/^\w{1,4}$/} : string, ? : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_only( "my_rule = [ @{id type}@{assert $==/^\\w{1,4}$/ ; Must for 4 or less chars{};} : string, ? : float ]\n" ) (1694)
      my_rule = [ @{id type}@{assert $==/^\w{1,4}$/ ; Must for 4 or less chars{};} : string, ? : float ]

not ok: status == JCRParser::S_OK (49)
      Calling: test_parsing_bad_input( "my_rule = [ @{unknown} : string, : float ]\n" ) (1696)
      my_rule = [ @{unknown} : string, : float ]

    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (3):
------------------------
- Implement and test GrammarSet::link() [test-grammar-set.cpp:42]
- Test low level GrammarSet class [test-low-level-objects.cpp:230]
- Test correct setting of min/max 'ValueConstraint's when parsing int?? and uint??.  See  TODO_TEST_MIN_MAX_SIZED_INTS [test-main.cpp:39]

27 error(s), 3 todo(s), 207 test(s)
