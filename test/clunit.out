Tests run on Fri Jan 22 21:07:41 2016

    GrammarSet TODOS [test-grammar-set.cpp:40]
    ==========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Miscellaneous TODOs [test-main.cpp:37]
    ======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    RuleOrDirective creation [test-object-creation.cpp:40]
    ======================================================
    ok: pu_rule_or_directive->is_rule() == true
    ok: pu_rule_or_directive->is_directive() == false
    ok: true
    ok: pu_rule_or_directive->is_directive() == true
    ok: pu_rule_or_directive->is_rule() == false
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar creation / deletion [test-object-creation.cpp:75]
    =========================================================
    ok: i != end
    ok: i->is_directive()
    ok: ! (*i).is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: grammar.back_is_directive()
    ok: ! grammar.back_is_rule()
    ok: grammar.back_is_rule()
    ok: ! grammar.back_is_directive()
    ok: i != end
    ok: i->is_directive()
    ok: ! i->is_rule()
    ok: i != end
    ok: ! i->is_directive()
    ok: i->is_rule()
    ok: i == end
    ok: grammar[0].is_directive()
    ok: ! grammar[0].is_rule()
    ok: ! grammar[1].is_directive()
    ok: grammar[1].is_rule()
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Grammar exception throwing on bad selection [test-object-creation.cpp:126]
    ==========================================================================
    ok: true
    ok: true
    ok: true
    ok: true
    ok: true
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Creating various types of Rules in Grammars [test-object-creation.cpp:185]
    ==========================================================================
    ok: r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: ! r_rule.is_group_rule()
    ok: ! r_rule.is_ref_rule()
    ok: r_rule.rule_kind() == RuleKind::UNDEFINED_VALUE
    ok: ! r_rule.is_value_rule()
    ok: r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: ! r_rule.is_group_rule()
    ok: ! r_rule.is_ref_rule()
    ok: r_rule.rule_kind() == RuleKind::ARRAY
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: r_rule.is_object_rule()
    ok: ! r_rule.is_group_rule()
    ok: ! r_rule.is_ref_rule()
    ok: r_rule.rule_kind() == RuleKind::OBJECT
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: r_rule.is_group_rule()
    ok: ! r_rule.is_ref_rule()
    ok: r_rule.rule_kind() == RuleKind::GROUP
    ok: ! r_rule.is_value_rule()
    ok: ! r_rule.is_array_rule()
    ok: ! r_rule.is_object_rule()
    ok: ! r_rule.is_group_rule()
    ok: r_rule.is_ref_rule()
    ok: r_rule.rule_kind() == RuleKind::REF
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Creating various types of ValueRule, e.g. SimpleType, EnumType etc. [test-object-creation.cpp:243]
    ==================================================================================================
    ok: r_value_rule.is_value_rule()
    ok: ! r_value_rule.is_simple_type()
    ok: ! r_value_rule.is_union_type()
    ok: r_value_rule.rule_kind() == RuleKind::UNDEFINED_VALUE
    ok: r_value_rule.is_simple_type()
    ok: ! r_value_rule.is_union_type()
    ok: r_value_rule.rule_kind() == RuleKind::SIMPLE_VALUE
    ok: ! r_value_rule.is_simple_type()
    ok: r_value_rule.is_union_type()
    ok: r_value_rule.rule_kind() == RuleKind::UNION_VALUE
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing with no semantic interpretation - comments [test-parsing-only.cpp:62]
    ====================================================================================================
      Calling: test_parsing_only( "" ) (65)
      
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "   " ) (67)
         
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (69)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (71)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     " ) (74)
      ; Hello World
     
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     \n" "  ; Let's go..." ) (78)
      ; Hello World
     
  ; Let's go...
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "; Hello World ; Let's go...\n" ) (80)
      ; Hello World ; Let's go...

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World ;; Let's go...\n" ) (82)
      ; Hello World ;; Let's go...

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "" ) (84)
      
    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - JCR directive [test-parsing-only.cpp:87]
    =========================================================================
      Calling: test_parsing_only( "#jcr-version 0.5" ) (90)
      #jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#\n" "jcr-version\n" " 0.5" ) (94)
      #
jcr-version
 0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "#jcr-version 0.12" ) (96)
      #jcr-version 0.12
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#jcr-version 10.5" ) (98)
      #jcr-version 10.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0.5 too long" ) (100)
      #jcr-version 0.5 too long
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5" ) (103)
      ; Start
#jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5\n" "; End" ) (107)
      ; Start
#jcr-version 0.5
; End
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "  #jcr-version 0.5\n" "; End" ) (110)
        #jcr-version 0.5
; End
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Start ; #jcr-version 0.5" ) (112)
      ; Start ; #jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version0.5" ) (114)
      #jcr-version0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version a.5" ) (116)
      #jcr-version a.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0:5" ) (118)
      #jcr-version 0:5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0.b" ) (120)
      #jcr-version 0.b
    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - ruleset-id directive [test-parsing-only.cpp:123]
    =================================================================================
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" ) (126)
      #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#ruleset-id \n" ) (128)
      #ruleset-id 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#ruleset-id\n" ) (130)
      #ruleset-id

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; A comment ; #ruleset-id http://www.example.com/jcr\n" ) (132)
      ; A comment ; #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment" ) (135)
      #ruleset-id http://www.example.com/jcr
; A comment
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment\n" "; Another comment\n" "#jcr-version 0.5\n" ) (140)
      #ruleset-id http://www.example.com/jcr
; A comment
; Another comment
#jcr-version 0.5

    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - import directive [test-parsing-only.cpp:143]
    =============================================================================
      Calling: test_parsing_only( "#import http://www.example.com/jcr\n" ) (146)
      #import http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#import http://www.example.com/jcr as\n" ) (148)
      #import http://www.example.com/jcr as

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#import http://www.example.com/jcr as \n" ) (150)
      #import http://www.example.com/jcr as 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "#import http://www.example.com/jcr as my_1st-alias\n" ) (152)
      #import http://www.example.com/jcr as my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#import http://www.example.com/jcr as  my_1st-alias\n" ) (155)
       ; Hello
#import http://www.example.com/jcr as  my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "#ruleset-id http://www.example.com/jcr\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (162)
       ; Hello
#jcr-version 0.5
#ruleset-id http://www.example.com/jcr
#import http://www.example.com/jcr as  my_1st-alias
#import http://www.example.com/jcr2 as  my_2nd-alias


    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "  ; A comment\n" "#ruleset-id http://www.example.com/jcr\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (176)
       ; Hello
#jcr-version 0.5
  ; A comment
#ruleset-id http://www.example.com/jcr
  ; A comment
  ; A comment
#import http://www.example.com/jcr as  my_1st-alias
  ; A comment
  ; A comment
  ; A comment
  ; A comment
#import http://www.example.com/jcr2 as  my_2nd-alias


    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - TBD directive [test-parsing-only.cpp:179]
    ==========================================================================
      Calling: test_parsing_only_bad_input( "#TBD\n" ) (182)
      #TBD

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#TBD  we\n" ) (184)
      #TBD  we

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#TBD  we don't know\n" ) (186)
      #TBD  we don't know

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "; Hello\n" "#TBD\n" "#jcr-version 0.5\n" ) (190)
      ; Hello
#TBD
#jcr-version 0.5

    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (6):
------------------------
- Test GrammarSet class [test-grammar-set.cpp:42]
- Implement and test GrammarSet::link() [test-grammar-set.cpp:44]
- Implement ValueRuleAdapters [test-main.cpp:39]
- Make RefRule set method split input into module and local parts [test-main.cpp:41]
- Enhance GrammarParser::q_string() and QStringParsert to full spec [test-main.cpp:43]
- Add test-rules-parser.cpp back into project for testing [test-main.cpp:45]

0 error(s), 6 todo(s), 129 test(s)
