Tests run on Fri Jan 29 11:44:10 2016

    GrammarSet TODOS [test-grammar-set.cpp:40]
    ==========================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    Miscellaneous TODOs [test-main.cpp:37]
    ======================================
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing with no semantic interpretation - comments [test-parsing-only.cpp:62]
    ====================================================================================================
      Calling: test_parsing_only( "" ) (65)
      
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "   " ) (67)
         
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (69)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World" ) (71)
      ; Hello World
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     " ) (74)
      ; Hello World
     
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World\n" "     \n" "  ; Let's go..." ) (78)
      ; Hello World
     
  ; Let's go...
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "; Hello World ; Let's go...\n" ) (80)
      ; Hello World ; Let's go...

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Hello World ;; Let's go...\n" ) (82)
      ; Hello World ;; Let's go...

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "" ) (84)
      
    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - JCR directive [test-parsing-only.cpp:87]
    =========================================================================
      Calling: test_parsing_only( "#jcr-version 0.5" ) (90)
      #jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#\n" "jcr-version\n" " 0.5" ) (94)
      #
jcr-version
 0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "#jcr-version 0.12" ) (96)
      #jcr-version 0.12
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#jcr-version 10.5" ) (98)
      #jcr-version 10.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0.5 too long" ) (100)
      #jcr-version 0.5 too long
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5" ) (103)
      ; Start
#jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Start\n" "#jcr-version 0.5\n" "; End" ) (107)
      ; Start
#jcr-version 0.5
; End
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "  #jcr-version 0.5\n" "; End" ) (110)
        #jcr-version 0.5
; End
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "; Start ; #jcr-version 0.5" ) (112)
      ; Start ; #jcr-version 0.5
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version0.5" ) (114)
      #jcr-version0.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version a.5" ) (116)
      #jcr-version a.5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0:5" ) (118)
      #jcr-version 0:5
    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#jcr-version 0.b" ) (120)
      #jcr-version 0.b
    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - ruleset-id directive [test-parsing-only.cpp:123]
    =================================================================================
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" ) (126)
      #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#ruleset-id \n" ) (128)
      #ruleset-id 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#ruleset-id\n" ) (130)
      #ruleset-id

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "; A comment ; #ruleset-id http://www.example.com/jcr\n" ) (132)
      ; A comment ; #ruleset-id http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment" ) (135)
      #ruleset-id http://www.example.com/jcr
; A comment
    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( "#ruleset-id http://www.example.com/jcr\n" "; A comment\n" "; Another comment\n" "#jcr-version 0.5\n" ) (140)
      #ruleset-id http://www.example.com/jcr
; A comment
; Another comment
#jcr-version 0.5

    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - import directive [test-parsing-only.cpp:143]
    =============================================================================
      Calling: test_parsing_only( "#import http://www.example.com/jcr\n" ) (146)
      #import http://www.example.com/jcr

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#import http://www.example.com/jcr as\n" ) (148)
      #import http://www.example.com/jcr as

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#import http://www.example.com/jcr as \n" ) (150)
      #import http://www.example.com/jcr as 

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only( "#import http://www.example.com/jcr as my_1st-alias\n" ) (152)
      #import http://www.example.com/jcr as my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#import http://www.example.com/jcr as  my_1st-alias\n" ) (155)
       ; Hello
#import http://www.example.com/jcr as  my_1st-alias

    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "#ruleset-id http://www.example.com/jcr\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (162)
       ; Hello
#jcr-version 0.5
#ruleset-id http://www.example.com/jcr
#import http://www.example.com/jcr as  my_1st-alias
#import http://www.example.com/jcr2 as  my_2nd-alias


    ok: status == JCRParser::S_OK
      Calling: test_parsing_only( " ; Hello\n" "#jcr-version 0.5\n" "  ; A comment\n" "#ruleset-id http://www.example.com/jcr\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr as  my_1st-alias\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "  ; A comment\n" "#import http://www.example.com/jcr2 as  my_2nd-alias\n" "\n" ) (176)
       ; Hello
#jcr-version 0.5
  ; A comment
#ruleset-id http://www.example.com/jcr
  ; A comment
  ; A comment
#import http://www.example.com/jcr as  my_1st-alias
  ; A comment
  ; A comment
  ; A comment
  ; A comment
#import http://www.example.com/jcr2 as  my_2nd-alias


    ok: status == JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - TBD directive [test-parsing-only.cpp:179]
    ==========================================================================
      Calling: test_parsing_only_bad_input( "#TBD\n" ) (182)
      #TBD

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#TBD  we\n" ) (184)
      #TBD  we

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "#TBD  we don't know\n" ) (186)
      #TBD  we don't know

    ok: status != JCRParser::S_OK
      Calling: test_parsing_only_bad_input( "; Hello\n" "#TBD\n" "#jcr-version 0.5\n" ) (190)
      ; Hello
#TBD
#jcr-version 0.5

    ok: status != JCRParser::S_OK
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    GrammarParser - Syntax parsing - Primitive rules [test-parsing-only.cpp:193]
    ============================================================================
      Calling: test_parsing_only( "my_rule : null\n" ) (196)
      my_rule : null

    ok: status == JCRParser::S_OK
      : ParserHarness ph( "my_rule : null\n" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().rules.size() == 1
    ok: ph.grammar().rules[0].rule_name == "my_rule"
    ok: ph.grammar().rules[0].type == Rule::TNULL
    ok: ph.grammar().rules[0].repetition.min == 1
    ok: ph.grammar().rules[0].repetition.max == 1
      : ParserHarness ph( "another_rule : boolean\n" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().rules.size() == 1
    ok: ph.grammar().rules[0].rule_name == "another_rule"
    ok: ph.grammar().rules[0].type == Rule::BOOLEAN
    ok: ph.grammar().rules[0].min.is_set() == false
    ok: ph.grammar().rules[0].max.is_set() == false
      : ParserHarness ph( "another_rule : true\n" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().rules.size() == 1
    ok: ph.grammar().rules[0].rule_name == "another_rule"
    ok: ph.grammar().rules[0].type == Rule::BOOLEAN
    ok: ph.grammar().rules[0].min.is_set() == true
    ok: ph.grammar().rules[0].min == "true"
    ok: ph.grammar().rules[0].min.to_bool() == true
    ok: ph.grammar().rules[0].max.is_set() == true
    ok: ph.grammar().rules[0].max == "true"
    ok: ph.grammar().rules[0].max.to_bool() == true
      : ParserHarness ph( "another_rule : boolean\n" )
    ok: ph.status() == JCRParser::S_OK
    ok: ph.grammar().rules.size() == 1
    ok: ph.grammar().rules[0].rule_name == "another_rule"
    ok: ph.grammar().rules[0].type == Rule::BOOLEAN
    ok: ph.grammar().rules[0].min.is_set() == false
    ok: ph.grammar().rules[0].max.is_set() == false
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    ValueConstraint [test-low-level-objects.cpp:40]
    ===============================================
    ok: vc.is_set() == false
      : vc = "true"
    ok: vc.is_set() == true
    ok: vc == "true"
    ok: vc == std::string( "true" )
    ok: vc.to_string() == "true"
    ok: vc.to_bool() == true
    ok: vc.to_int() == 0
    ok: vc.to_float() == 0
      : vc = "false"
    ok: vc.is_set() == true
    ok: vc == "false"
    ok: vc.to_bool() == false
    ok: vc.to_int() == 0
    ok: vc.to_float() == 0
      : vc = "foo"
    ok: vc.is_set() == true
    ok: vc == "foo"
    ok: vc.to_bool() == false
    ok: vc.to_int() == 0
    ok: vc.to_float() == 0
      : vc = "10"
    ok: vc.is_set() == true
    ok: vc == "10"
    ok: vc.to_bool() == false
    ok: vc.to_int() == 10
    ok: vc.to_float() == 10.0
      : vc = "10.5"
    ok: vc.is_set() == true
    ok: vc == "10.5"
    ok: vc.to_bool() == false
    ok: vc.to_int() == 10
    ok: vc.to_float() == 10.5
      : vc = "2.5e+3"
    ok: vc.is_set() == true
    ok: vc == "2.5e+3"
    ok: vc.to_bool() == false
    ok: vc.to_int() == 2
    ok: vc.to_float() == 2500.0
      : vc.clear()
    ok: vc.is_set() == false
    ok: vc == ""
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    MemberName [test-low-level-objects.cpp:95]
    ==========================================
    ok: mn.is_absent() == true
    ok: mn.is_literal() == false
    ok: mn.is_regex() == false
    ok: mn.name() == ""
      : mn.set_literal( "foo" )
    ok: mn.is_absent() == false
    ok: mn.is_literal() == true
    ok: mn.is_regex() == false
    ok: mn.name() == "foo"
      : mn.set_regex( "/name*/i" )
    ok: mn.is_absent() == false
    ok: mn.is_literal() == false
    ok: mn.is_regex() == true
    ok: mn.name() == "/name*/i"
      : mn.set_absent()
    ok: mn.is_absent() == true
    ok: mn.is_literal() == false
    ok: mn.is_regex() == false
    ok: mn.name() == ""
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )

    TargetRule [test-low-level-objects.cpp:123]
    ===========================================
    ok: ! tr.p_rule
    ok: ! _CrtMemDifference( &s3, &s1, &s2 )
    ok: _CrtCheckMemory() != 0

TODOs (7):
------------------------
- Test GrammarSet class [test-grammar-set.cpp:42]
- Implement and test GrammarSet::link() [test-grammar-set.cpp:44]
- Implement ValueRuleAdapters [test-main.cpp:39]
- Make RefRule set method split input into module and local parts [test-main.cpp:41]
- Enhance GrammarParser::q_string() and QStringParsert to full spec [test-main.cpp:43]
- Add test-rules-parser.cpp back into project for testing [test-main.cpp:45]
- Correctly populate and place annotations into Grammar [test-parsing-only.cpp:243]

0 error(s), 7 todo(s), 133 test(s)
